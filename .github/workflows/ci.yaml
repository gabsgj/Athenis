name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Lint & Test Python
        run: |
          flake8 app || true
          FAST_TEST=1 pytest -q
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Go Test
        run: |
          cd gofr
          go test ./...

  build-images:
    runs-on: ubuntu-latest
    needs: lint-test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Log in to registry
        if: env.REGISTRY != ''
        run: |
          echo "$REGISTRY_PASSWORD" | docker login "$REGISTRY" -u "$REGISTRY_USERNAME" --password-stdin
        env:
          REGISTRY: ${{ secrets.REGISTRY }}
          REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      - name: Build images
        run: |
          docker build -t $IMAGE_REPO:latest -f Dockerfile .
          docker build -t $IMAGE_REPO-gofr:latest -f gofr/Dockerfile gofr
        env:
          IMAGE_REPO: ${{ secrets.IMAGE_REPO }}
      - name: Push images
        if: env.REGISTRY != ''
        run: |
          docker push $IMAGE_REPO:latest
          docker push $IMAGE_REPO-gofr:latest
        env:
          REGISTRY: ${{ secrets.REGISTRY }}
          IMAGE_REPO: ${{ secrets.IMAGE_REPO }}

  smoke-test:
    runs-on: ubuntu-latest
    needs: build-images
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Build docker-compose
        run: |
          docker compose up -d --build
          sleep 10
          curl -f http://localhost:8080/api/v1/health
          docker compose logs --no-color | tail -n 200 || true
          docker compose down
